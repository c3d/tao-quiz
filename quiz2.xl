// ****************************************************************************
//  quiz2.xl                                                       Tao project
// ****************************************************************************
//
//   File Description:
//
//     Handle quizz setup and communication with the server
//
//
//
//
//
//
//
//
// ****************************************************************************
//  (C) 2011 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2011 Taodyne SAS
// ****************************************************************************

import NetworkAccess
import RegExp
import Slides
import Animate
// ============================================================================
//
//  Main question functions
//
// ============================================================================

MCQ_quizz Question:text, Img:text, Body ->
// ----------------------------------------------------------------------------
//    Setup a new MultiChoice Question with an image in the question
// ----------------------------------------------------------------------------
    openText := "false"
    quizz Question, Img, Body

MCQ_quizz Question:text, Body ->
// ----------------------------------------------------------------------------
//    Setup a new MultiChoice Question without image in the question
// ----------------------------------------------------------------------------
    MCQ_quizz Question, "", Body

OTQ_quizz  Question:text, Img:text, Body ->
// ----------------------------------------------------------------------------
//    Setup a new Open Text Question with an image in the question
// ----------------------------------------------------------------------------
    openText := "true"
    quizz Question, Img,
        quizz_set_url := quizz_set_url & "&opentext"
        Body

OTQ_quizz  Question:text, Body ->
// ----------------------------------------------------------------------------
//    Setup a new Open Text Question without image in the question
// ----------------------------------------------------------------------------
    OTQ_quizz  Question, "", Body

Mouse_quizz Question:text, Img:text, Body ->
// ----------------------------------------------------------------------------
//    Setup a new Mouse interaction with an image in the question
// ----------------------------------------------------------------------------
    openText := "true";
    quizz Question, Img,
        quizz_set_url := quizz_set_url & "&mouse"
        Body

Mouse_quizz Question:text, Body ->
// ----------------------------------------------------------------------------
//    Setup a new Mouse interaction without image in the question
// ----------------------------------------------------------------------------
    Mouse_quizz Question, "", Body



// ============================================================================
//
//  Proposition of answers for MultiChoice Questions
//
// ============================================================================

answer T:text, Img:text, Score:integer ->
// ----------------------------------------------------------------------------
//    Add an answer to a Quizz
// ----------------------------------------------------------------------------
    answer_internal quizz_state, quizz_index, T, Score, Img
    quizz_index := quizz_index + 1

answer T:text, Score:integer -> answer T, "", Score
answer T:text, Img:text -> answer T, Img, 0
answer T:text -> answer T, "", 0



// ============================================================================
//
//  Internal functions for quizz setup
//
// ============================================================================

quizz Question:text, Img:text, Body ->
// ----------------------------------------------------------------------------
//    Setup a new quizz
// ----------------------------------------------------------------------------
    // Initialize the state of the new question
    quizz_setup Question, Img, Body

    if quizz_phase = "question" then
        // Draw the quizz
        quizz_draw Question, Img, Body
    else
        // Draw the quizz
        quizz_answers Question, Img, Body


quizz Question:text, Body ->
// ----------------------------------------------------------------------------
//    Setup a new quizz with no image
// ----------------------------------------------------------------------------
    quizz Question, "", Body


quizz_setup Question:text, Img:text, Body ->
// ----------------------------------------------------------------------------
//    Setup a new Quizz
// ----------------------------------------------------------------------------
    locally
        if page_time < 1 then
            quizz_phase := "question"
            quizz_index := 1
            quizz_set_url := quizz_url & "set.php?" & prez_code & "&q=" & escT Question & "|" & Img
            quizz_state := "setup"

            // Evaluate body
            Body

            // Request URL and move to next page
            get_url_text quizz_set_url

        else
            no_refresh_on TimerEvent


quizz_option T:text ->
// ----------------------------------------------------------------------------
//   Send an option directly to the server
// ----------------------------------------------------------------------------
    quizz_set_url := quizz_set_url & "&" & T


quizz_draw Question:text, Img:text, Body ->
// ----------------------------------------------------------------------------
//    Default drawing for a quizz
// ----------------------------------------------------------------------------
    title
        text Question
        if Img <> "" then
            line_break
            anchor
                translatey -(image_size Img at 2) / 2
                color "white"
                image 0,0,1,1, Img

    if openText = "false" then
        story
            quizz_index := 1
            quizz_state := "draw"
            Body
            time
    else
        locally
            quizz_index := 1
            quizz_state := "draw"
            time
            Body


// ============================================================================
//
//  Internal function to support answers
//
// ============================================================================

quizz_answers Question:text, Img:text, Body ->
// ----------------------------------------------------------------------------
//    Default drawing for a quizz
// ----------------------------------------------------------------------------
    quizz_draw Question, Img,
        quizz_state := "answer"
        Body


answer_internal "setup", A:integer, T:text, Score:integer, Img:text ->
// ----------------------------------------------------------------------------
//   Add an answer to a quizz
// ----------------------------------------------------------------------------
    quizz_set_url := quizz_set_url & "&a" & text A & "=" & text Score & "|" & escT T & "|" & Img


answer_internal "draw", A:integer, T:text, Score:integer, Img:text ->
// ----------------------------------------------------------------------------
//   Draw a paragraph for a quizz
// ----------------------------------------------------------------------------
    - (text A & " - " & T)
    if Img <> ""  then
        text_span
            color "white"
            image 0,0,1,1, Img


answer_internal "answer", A:integer, T:text, Score:integer, Img:text ->
// ----------------------------------------------------------------------------
//   Draw a paragraph for a quizz
// ----------------------------------------------------------------------------
    text_span
        if Score > 0 then
            color "darkred"
        else
            color "darkblue"

        graph_bullet (text A & " - " & T), real(quizz_score A), real (quizz_total)

        if Img <> ""  then
            color "white"
            image 0,0,1,1, Img


// ============================================================================
//
//  Functions to get Quizz/Result information
//
// ============================================================================
quizz_score I:integer ->
// ----------------------------------------------------------------------------
//   Return the score for the given index
// ----------------------------------------------------------------------------
    get_url_text quizz_url & "value.php?" & prez_code & "&a=" & text I


quizz_total ->
// ----------------------------------------------------------------------------
//   Return the total number of answers
// ----------------------------------------------------------------------------
    get_url_text quizz_url & "value.php?" & prez_code & "&total"


quizz_reset_question Question:text->
// ----------------------------------------------------------------------------
//    Reset the current question
// ----------------------------------------------------------------------------
    get_url_text quizz_url & "clear.php?" & prez_code & "&q=" & Question


quizz_I_am_sure_I_want_to_reset_all ->
// ----------------------------------------------------------------------------
//    Reset the current quiz
// ----------------------------------------------------------------------------
    get_url_text quizz_url & "reset.php?" & prez_code


// ============================================================================
//
//  Functions to set generic behavior
//
// ============================================================================
quizz_deactivate_on_answer Time:integer ->
// ----------------------------------------------------------------------------
//   Stop the possibility to users to answer, but the result is still showable
// ----------------------------------------------------------------------------
    after Time,
        deactivate quizz_phase


quizz_deactivate_on_answer ->
// ----------------------------------------------------------------------------
//   Stop the possibility to users to answer, but the result is still showable
// ----------------------------------------------------------------------------
    deactivate quizz_phase


deactivate "answer" ->
     quizz_set_url := quizz_set_url & "&deactivate"
deactivate T -> false



// ============================================================================
//
//  Functions to set MCQ behavior
//
// ============================================================================
quizz_set_unique ->
// ----------------------------------------------------------------------------
//    'unique' mode: for each user, only the first answer is registered
// ----------------------------------------------------------------------------
    quizz_set_url := quizz_set_url & "&unique"


quizz_set_last ->
// ----------------------------------------------------------------------------
//    'last' mode: for each user, only the last answer is registered
// ----------------------------------------------------------------------------
    quizz_set_url := quizz_set_url & "&last"


quizz_set_multiple ->
// ----------------------------------------------------------------------------
//   'multiple' mode: for each user, all answers are registered
// ----------------------------------------------------------------------------
    quizz_set_url := quizz_set_url & "&multiple"


quizz_set_user_feedback T:text  ->
// ----------------------------------------------------------------------------
//    User's feedback choice
// ----------------------------------------------------------------------------
     quizz_set_url := quizz_set_url & "&userfeedback=" & T
// Possible values for T are:
// no   -> no feedback (default value)
// self -> its own answer
// stat -> statistic on all answers from all users


// ============================================================================
//
//  Functions to set MousePad behavior
//
// ============================================================================

quizz_set_mouse_pad Square:text, T:text, Image:text ->
// ----------------------------------------------------------------------------
//    Configuration for squares of the mouse pad
// ----------------------------------------------------------------------------
     quizz_set_url := quizz_set_url & "&" & Square & "=" & T & "|" & Image
// The mouse pad is made of 9 squares. Except the middle one, they are each
// settable with text and image. Square is combination of [tmb][lcr] for
// Top, Middle, Bottom and Left, Center, Right.

quizz_set_mouse_pad T ->
    debug T


// ============================================================================
//
//  Functions to draw a graph in front of each answer
//
// ============================================================================
quizz_graph "barchart", Index:integer, Value:real, Total:real ->
// ----------------------------------------------------------------------------
//   Draw a graph item
// ----------------------------------------------------------------------------
    locally
        translatex -25
        translatey 7

        light 0, false
        text_box -10, 25, 100, 50,
            line_color "font"
            color "font"
            align 0.5
            vertical_align 0.5
            font "Arial", 20
            text text Value
        rotatez -65
        rotatey 75
        colorpie Index
        line_width 1
        cylinder 0, 0, 1 + 3 * Value, 10, 10, 3 + 6 * Value


quizz_graph "piechart", Index:integer, Value:real, Total:real  ->
// ----------------------------------------------------------------------------
//   Draw a pie chart item
// ----------------------------------------------------------------------------
  locally
    translatex -25
    translatey 7

    locally
        light 0, false
        text_box -10, 30, 100, 30,
            align 0.5
            vertical_align 0.5
            color "black"
            font "Arial", 20
            text text Value
    rotatez 15
    rotatey 45
    locally
        light 0, false
        line_width 1
        line_color "black"
        color "transparent"
        circle 0, 0, 20
        colorpie Index
        if Total > 0.0 then
            cylinder 0, 0, -5, 20, 20, 10
            ellipse_arc 0, 0, 40, 40, 0, 360.0 * (Value / Total)


graph_bullet Text:text, score:real, total: real ->
// ----------------------------------------------------------------------------
//   Draw the graph as a bullet level 1
// ----------------------------------------------------------------------------
    theme_style theme, slide_master, "story", 1
    paragraph_break
    anchor
        theme_style theme, slide_master, "bullet"
        quizz_graph graph_style, quizz_index, score, total
    text Text


colorpie 5 -> color "red"; line_color "red"
colorpie 4 -> color "blue"; line_color "blue"
colorpie 3 -> color "green"; line_color "green"
colorpie 2 -> color "orange"; line_color "orange"
colorpie 1 -> color "magenta"; line_color "magenta"
colorpie 6 -> color "cyan"; line_color "cyan"
colorpie T -> color "gray"; line_color "darkgray"


// ============================================================================
//
//  Functions to draw a Pie to summup all answers
//
// ============================================================================
total_answer_graph -> fullpie quizz_state

fullpie "answer" ->
// ----------------------------------------------------------------------------
//   Draw the full pie chart and the number of received answers
// ----------------------------------------------------------------------------
    paragraph_break
    floating
        draw_start -> 0.0
        v -> 0.0
        Total ->real( quizz_total )
        t -> if (Total > 0.0) then Total else 1.0
        draw_pie idx:integer ->
            v := (real (quizz_score idx)) / t
            colorpie idx
            ellipse_arc 0, 0, 100, 100, draw_start, 360.0 * v
            draw_start := draw_start + (360.0 * v)

        translatex 500
        translatey -400
        draw_start := 0.0
        draw_pie with 1..quizz_index
        text_box 250, 0, 500, 70,
            locally
                color "font"
                line_color "font"
                text "   "
                text text Total
                text " answers" fr " réponses"


fullpie "draw" ->
// ----------------------------------------------------------------------------
//   Draw the number of received answers
// ----------------------------------------------------------------------------
    paragraph_break
    floating
        translatex 500
        translatey -400
        text_box 250, 0, 500, 70,
            color "font"
            line_color "font"
            text quizz_total
            text " answers" fr " réponses"


fullpie T -> false

// ============================================================================
//
//   Open text management
//
// ============================================================================
// ----------------------------------------------------------------------------
//  CONFIGURABLE - Widht, height of text boxes, number of text boxes per column
// ----------------------------------------------------------------------------
Delta_X -> 400
Delta_Y -> 60
BoxPerCol -> 10


quizz_show_text_answers -> show_answers_def quizz_state
// ----------------------------------------------------------------------------
//  Default style to draw answers.
// ----------------------------------------------------------------------------


show_answers Style:text ->
// ----------------------------------------------------------------------------
//  call "style" function with each answer
// ----------------------------------------------------------------------------
    AnsId := 0
    get_url_data quizz_url & "value.php?" & prez_code, Style, "", ","

show_answers T -> false

// ----------------------------------------------------------------------------
//  NOT settable - Used variables for default answer
// ----------------------------------------------------------------------------
// Total number of box to draw, previous and current
NbBox -> 0
OldNbBox -> 0

// AutoScroll is set to "off" when left/right key are hit,
//            and set to "on" when return key is hit.
AutoScroll -> "on"
// Number of the current answer (between 0 and NbBox)
AnsId -> 0
// X position to draw the text box
X_box -> 0
// Used to scroll once when number of colmn increase in autoscroll mode
Once -> 0

show_answers_def "draw"->
// ----------------------------------------------------------------------------
//  Default message for question page.
// ----------------------------------------------------------------------------
    text_box 0, 0, 800, 600,
        align_center
        font "TeX Gyre Adventor", "Arial", 30
        text "Hit / to see answers" fr "Appuyez sur / pour voir les réponses "


show_answers_def "answer"->
// ----------------------------------------------------------------------------
//  Answer preparation.
// ----------------------------------------------------------------------------
    locally
        X_box := 0
        NbBox := integer(quizz_total)
        if OldNbBox <> NbBox then
            OldNbBox := NbBox
            Once := 1
        // Draw the number of answers
        text_box -200, -450, 800, 60,
            font "TeX Gyre Adventor", "Arial", 30
            text "Number of answer "fr "Nombre de réponses "
            text text NbBox
        // Compute the Begining : where to scroll when return is hit
        Begining := (NbBox / BoxPerCol) - 1
        translatey -300
        compute_smooth_step
        translatex -(smooth_step * Delta_X)
        // Draw the column number of the first column
        text_box X_box, Delta_Y * BoxPerCol, Delta_X, Delta_Y,
            font "TeX Gyre Adventor", "Arial", 30
            text "1"

        // Set layout for each answer
        font "TeX Gyre Adventor", "Arial", 38, bold
        align_left
        margins 5, 0
        // Draw each answer
        show_answers "Default_answer_display"


Default_answer_display "" ->
// ----------------------------------------------------------------------------
//  Nothing drawn for empty lines
// ----------------------------------------------------------------------------
    false

Default_answer_display Answer:text ->
// ----------------------------------------------------------------------------
//  Answers drawing.
// ----------------------------------------------------------------------------
    locally
        // Translate to the drawing position
        Y_box -> (AnsId mod BoxPerCol ) * Delta_Y
        translatex X_box
        translatey Y_box
        // The answer
        box 0, 0, Delta_X, Delta_Y,
            theme_style theme, slide_master, "story", 3
            text Answer

    // Manage the answer number and column skip
    AnsId := AnsId + 1
    if (AnsId mod BoxPerCol ) = 0 then
        X_box := X_box + Delta_X
        // Draw the column number
        text_box X_box, Delta_Y * BoxPerCol, Delta_X, Delta_Y,
            font "TeX Gyre Adventor", "Arial", 30
            text text ((AnsId / BoxPerCol) + 1)
        // Shift once if not already done
        if Once <> 0 and AutoScroll = "on" and NbBox mod BoxPerCol = 0.0 then
            skip 1
            Once := 0

show_answers_def T -> false

// ============================================================================
//
//   Mouse management
//
// ============================================================================
push_color T ->
    color "darkblue"
release_color T ->
    color "white"

draw_mouse x:real, y:real, buttons:integer, id ->
// ----------------------------------------------------------------------------
//  Draw a circle on (x,y) location
// ----------------------------------------------------------------------------
    if buttons > 0 then
        push_color id
    else
        release_color id
    circle (x - 0.5) * 1000, (y - 0.5) * 1000, 10

draw_mouse "" -> false

draw_mouse button:text /*, id*/ ->
    LAST_BUTTON = button

draw_mouse Other -> false

text_mouse x:real, y:real, buttons:integer, id:integer ->
// ----------------------------------------------------------------------------
//  Write x and y values on the screen
// ----------------------------------------------------------------------------
    if buttons > 0 then
        color "darkblue"
    else
        color "white"
    text "id = " & text id
    text "     x = " & text x
    text " and y =  " & text y
    paragraph_break

text_mouse T-> false

LAST_BUTTON -> "none"

quizz_draw_mouse "draw_mouse" ->
// ----------------------------------------------------------------------------
//  Draw mouses location on the screen
// ----------------------------------------------------------------------------
    canvas 1000, 1000,
        get_url_data quizz_url & "mouse_data.php?" & prez_code, "draw_mouse", ",", "\n"
    rectangle 0,0,1000,1000

quizz_draw_mouse Style:text ->
// ----------------------------------------------------------------------------
//  Generic mouse handling
// ----------------------------------------------------------------------------
    get_url_data quizz_url & "mouse_data.php?" & prez_code, Style, ",", "\n"


quizz_draw_mouse -> quizz_draw_mouse "draw_mouse"
// ----------------------------------------------------------------------------
//  Default mouse handling
// ----------------------------------------------------------------------------


// ============================================================================
//
//   Language management
//
// ============================================================================

lang -> "fr"
Fr:text en En:text -> if lang = "en" then En else Fr
En:text fr Fr:text -> if lang = "fr" then Fr else En
french Body -> if lang = "fr" then Body
english Body -> if lang = "en" then Body
language L:text -> lang := L; refresh 0.1

// ============================================================================
//
//   Misc
//
// ============================================================================

escT T:text ->
// ----------------------------------------------------------------------------
//    Escape | in questions and answers
// ----------------------------------------------------------------------------
    if T = "" then
        ""
    else
        regexp_parse_text T,
            "\|"  -> "\|"
            "[^\|]+" -> regexp_captured 0

// ============================================================================
//
//   Variable settings
//
// ============================================================================

prez_name -> "z=" & quizz_name
prez_code -> prez_name & "&c=" & quizz_presenter_code
graph_style -> "barchart"

bargraph -> graph_style := "barchart"
piegraph -> graph_style := "piechart"

key "/" ->
    if quizz_phase = "question" then
        quizz_phase := "answer"
    else
        quizz_phase := "question"

openText -> "false"

quizz_index -> 0
quizz_set_url -> ""
quizz_state -> "setup"
quizz_phase -> "question"

